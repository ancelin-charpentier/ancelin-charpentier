from collections import Counter
from itertools import combinations

def optimize_cutting_with_groups(lengths_to_cut, max_bar_length):
    # Step 1: Find repetitive patterns
    def find_patterns(lengths, max_length):
        # Store all patterns that fit well into a bar
        patterns = Counter()
        for r in range(1, len(lengths) + 1):
            for combination in combinations(lengths, r):
                if sum(combination) <= max_length:
                    patterns[tuple(sorted(combination))] += 1
        return patterns

    # Step 2: Prioritize the most frequent patterns
    lengths_to_cut = sorted(lengths_to_cut, reverse=True)
    patterns = find_patterns(lengths_to_cut, max_bar_length)
    sorted_patterns = sorted(patterns.items(), key=lambda x: (-x[1], -sum(x[0])))

    # Step 3: Build bars using the patterns
    bars = []
    remaining = Counter(lengths_to_cut)

    for pattern, _ in sorted_patterns:
        while all(remaining[l] >= pattern.count(l) for l in pattern):
            bars.append(list(pattern))
            for l in pattern:
                remaining[l] -= pattern.count(l)

    # Step 4: Handle remaining lengths
    remaining_lengths = []
    for length, count in remaining.items():
        remaining_lengths.extend([length] * count)
    leftover_bars = optimize_cutting(remaining_lengths, max_bar_length)
    bars.extend(leftover_bars)

    return bars

# Greedy algorithm to handle leftovers
def optimize_cutting(lengths_to_cut, max_bar_length):
    bars = []
    lengths_to_cut = sorted(lengths_to_cut, reverse=True)
    for length in lengths_to_cut:
        placed = False
        for bar in bars:
            if sum(bar) + length <= max_bar_length:
                bar.append(length)
                placed = True
                break
        if not placed:
            bars.append([length])
    return bars

# Example usage
# lengths_to_cut = [4823, 7931, 2048, 5619, 3287, 9146, 7302, 4561, 9146, 5619, 8720, 4823, 5619, 7931, 3159, 3287, 9146, 7302, 2048, 4561, 2048, 3287, 8720, 7931, 3159, 4823, 7931, 8720, 7302, 7302, 2048]
lengths_to_cut = [4823, 7931, 2048, 5619, 3287, 9146, 7302, 4561, 9146, 5619, 8720, 4823, 5619, 7931, 3159, 3287, 9146, 7302, 2048, 4561, 2048, 3287, 8720, 7931, 914]

max_bar_length = 12000

used_bars = optimize_cutting_with_groups(lengths_to_cut, max_bar_length)
for i, bar in enumerate(used_bars, 1):
    print(f"Bar {i}: {bar} (Total: {sum(bar)} mm)")
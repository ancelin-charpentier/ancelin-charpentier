import menu_controller
import cadwork
import element_controller
import material_controller
import visualization_controller
import geometry_controller
import utility_controller
import bim_controller
import scene_controller
import attribute_controller
import math
import datetime

heavy_panel = []

light_panel = []

view_save = []

user_value = ""

menu_items = ['Element heavier than:', 'Element lighter than:', 'Shift prod number', 'COPY ATTRIBUTES 8 & 9', 'Set lay-up', 'Lay-up with dict',  'Training 1', 'IFC export', 'Command test', '', 'Return']

selected_menu_item = menu_controller.display_simple_menu(menu_items)

# disable check and query prompts
utility_controller.push_check_and_query_data()
utility_controller.change_check_and_query_data_to_no_queries()

# get active elements
active_elements = element_controller.get_active_identifiable_element_ids()

if selected_menu_item == 'Element heavier than:':
    user_value = utility_controller.get_user_int('Show panel heavier than (in Kg):')
    for parts in active_elements:
        panel_weight = geometry_controller.get_weight(parts)
        if panel_weight <= user_value:
            light_panel.append(parts)
            visualization_controller.set_inactive(light_panel)
    utility_controller.print_error(f'Panel heavier than {user_value} kg are active')

if selected_menu_item == 'Element lighter than:':
    user_value = utility_controller.get_user_int('Show panel lighter than (in Kg):')
    for parts in active_elements:
        panel_weight = geometry_controller.get_weight(parts)
        if panel_weight >= user_value:
            heavy_panel.append(parts)
            visualization_controller.set_inactive(heavy_panel)
    utility_controller.print_error(f'Panel lighter than {user_value} kg are active')

if selected_menu_item == 'Shift prod number':
    user_value = utility_controller.get_user_int('Define the value to apply to prod number')
    print(user_value)

    for element in active_elements:
        #visualization_controller.save_visibility_state(view_save)
        current_prod_number = attribute_controller.get_production_number(element)
        part_to_change = [element]
        modified_prod_number = current_prod_number + user_value
        created_number = [modified_prod_number]
        attribute_controller.set_production_number(part_to_change, modified_prod_number)
        #visualization_controller.hide_all_elements(element)
        #visualization_controller.restore_visibility_state(view_save)

    utility_controller.print_error('all done bro')

if selected_menu_item == 'COPY ATTRIBUTES 8 & 9':
    active_elements = element_controller.get_active_identifiable_element_ids()

    empty_attribute = {}
    filled_attribute = {}

    for element in active_elements:
        prod_num = attribute_controller.get_production_number(element)
        if prod_num != 0:
            if attribute_controller.get_user_attribute(element, 8) == "":
                if prod_num not in empty_attribute.keys():
                    empty_attribute[prod_num] = []
                empty_attribute[prod_num].append(element)
            else:
                if prod_num not in filled_attribute.keys():
                    filled_attribute[prod_num] = []
                filled_attribute[prod_num].append(element)

    for pn in filled_attribute.keys():
        user_8_text = ''
        user_9_text = ''
        for p in filled_attribute[pn]:
            user_8_text = attribute_controller.get_user_attribute(p, 8)
            user_9_text = attribute_controller.get_user_attribute(p, 9)
        for p in empty_attribute[pn]:
            attribute_controller.set_user_attribute([p], 8, user_8_text)
            attribute_controller.set_user_attribute([p], 9, user_9_text)

    utility_controller.print_error('Attributes 8 & 9 copied to original panels')

if selected_menu_item == 'Set lay-up':
    panel_3_layers = {}
    panel_5_layers = {}
    panel_7_layers = {}
    airstair_7_layers = {}
    airstair_8_layers = {}
    airstair_10_layers = {}

    layup = ()
    for panel in active_elements:
        material_name = attribute_controller.get_element_material_name(panel)
        print(material_name)
        if material_name != "CLT":
            pass
        else:
            element_name = attribute_controller.get_name(panel)
            if element_name == "AirStair":
                panel_height = geometry_controller.get_height(panel)
                print(panel_height)
                print(element_name)
                if 269 < panel_height < 271:
                    if panel_height not in airstair_7_layers.keys():
                        airstair_7_layers[panel] = []
                        airstair_7_layers[panel].append(panel)
                else:
                    if 299 < panel_height < 301:
                        if panel_height not in airstair_7_layers.keys():
                            airstair_7_layers[panel] = []
                            airstair_7_layers[panel].append(panel)
                    else:
                        if 262 < panel_height < 264:
                            if panel_height not in airstair_8_layers.keys():
                                airstair_8_layers[panel] = []
                                airstair_8_layers[panel].append(panel)
                        else:
                            if 292 < panel_height < 294:
                                if panel_height not in airstair_8_layers.keys():
                                    airstair_8_layers[panel] = []
                                    airstair_8_layers[panel].append(panel)
                            else:
                                if 332 < panel_height < 334:
                                    if panel_height not in airstair_10_layers.keys():
                                        airstair_10_layers[panel] = []
                                        airstair_10_layers[panel].append(panel)
            else:
                panel_height = geometry_controller.get_height(panel)
                print(panel_height)
                if 59 < panel_height < 131:
                    if panel_height not in panel_3_layers.keys():
                        panel_3_layers[panel] = []
                        panel_3_layers[panel].append(panel)
                else:
                    if 139 < panel_height < 221:
                        if panel_height not in panel_5_layers.keys():
                            panel_5_layers[panel] = []
                            panel_5_layers[panel].append(panel)
                    else:
                        if 239 < panel_height < 311:
                            if panel_height not in panel_7_layers.keys():
                                panel_7_layers[panel] = []
                                panel_7_layers[panel].append(panel)

    for p3 in panel_3_layers.keys():
        layup = "CL3"
        attribute_controller.set_user_attribute([p3], 2, layup)
        print(1)
    print(panel_3_layers)
    for p5 in panel_5_layers.keys():
        layup = "CL5"
        attribute_controller.set_user_attribute([p5], 2, layup)
        print(2)
    print(panel_5_layers)
    for p7 in panel_7_layers.keys():
        layup = "CL7"
        attribute_controller.set_user_attribute([p7], 2, layup)
        print(3)
    print(panel_7_layers)
    for as7 in airstair_7_layers.keys():
        layup = "AS7"
        attribute_controller.set_user_attribute([as7], 2, layup)
        print(4)
    print(airstair_7_layers)
    for as8 in airstair_8_layers.keys():
        layup = "AS8"
        attribute_controller.set_user_attribute([as8], 2, layup)
        print(5)
    print(airstair_8_layers)
    for as10 in airstair_10_layers.keys():
        layup = "AS10"
        attribute_controller.set_user_attribute([as10], 2, layup)
        print(6)
    print(airstair_10_layers)

    utility_controller.print_error('Lay-up set to activated panels')

# restores check and query prompts

utility_controller.pop_check_and_query_data()

if selected_menu_item == 'Lay-up with dict':
    panel_3_layers = {}
    panel_5_layers = {}
    panel_7_layers = {}
    airstair_7_layers = {}
    airstair_8_layers = {}
    airstair_10_layers = {}
    layup = ()
    for panel in active_elements:
        material_name = attribute_controller.get_element_material_name(panel)
        print(material_name)
        if material_name != "CLT":
            pass
        else:
            element_name = attribute_controller.get_name(panel)
            if element_name == "AirStair":
                panel_height = geometry_controller.get_height(panel)
                print(panel_height)
                print(element_name)
                if 269 < panel_height < 271:
                    if panel_height not in airstair_7_layers.keys():
                        airstair_7_layers[panel] = []
                        airstair_7_layers[panel].append(panel)
                else:
                    if 299 < panel_height < 301:
                        if panel_height not in airstair_7_layers.keys():
                            airstair_7_layers[panel] = []
                            airstair_7_layers[panel].append(panel)
                    else:
                        if 262 < panel_height < 264:
                            if panel_height not in airstair_8_layers.keys():
                                airstair_8_layers[panel] = []
                                airstair_8_layers[panel].append(panel)
                        else:
                            if 292 < panel_height < 294:
                                if panel_height not in airstair_8_layers.keys():
                                    airstair_8_layers[panel] = []
                                    airstair_8_layers[panel].append(panel)
                            else:
                                if 332 < panel_height < 334:
                                    if panel_height not in airstair_10_layers.keys():
                                        airstair_10_layers[panel] = []
                                        airstair_10_layers[panel].append(panel)
            else:
                panel_height = geometry_controller.get_height(panel)
                print(panel_height)
                if 59 < panel_height < 131:
                    if panel_height not in panel_3_layers.keys():
                        panel_3_layers[panel] = []
                        panel_3_layers[panel].append(panel)
                else:
                    if 139 < panel_height < 221:
                        if panel_height not in panel_5_layers.keys():
                            panel_5_layers[panel] = []
                            panel_5_layers[panel].append(panel)
                    else:
                        if 239 < panel_height < 311:
                            if panel_height not in panel_7_layers.keys():
                                panel_7_layers[panel] = []
                                panel_7_layers[panel].append(panel)

    for p3 in panel_3_layers.keys():
        layup = "CL3"
        attribute_controller.set_user_attribute([p3], 2, layup)
        print(1)
    print(panel_3_layers)
    print(panel_3_layers.keys())
    print(panel_3_layers.values())
    for p5 in panel_5_layers.keys():
        layup = "CL5"
        attribute_controller.set_user_attribute([p5], 2, layup)
        print(2)
    print(panel_5_layers)
    print(panel_5_layers.keys())
    print(panel_5_layers.values())
    for p7 in panel_7_layers.keys():
        layup = "CL7"
        attribute_controller.set_user_attribute([p7], 2, layup)
        print(3)
    print(panel_7_layers)
    print(panel_7_layers.keys())
    print(panel_7_layers.values())
    for as7 in airstair_7_layers.keys():
        layup = "AS7"
        attribute_controller.set_user_attribute([as7], 2, layup)
        print(4)
    print(airstair_7_layers)
    print(airstair_7_layers.keys())
    print(airstair_7_layers.values())
    for as8 in airstair_8_layers.keys():
        layup = "AS8"
        attribute_controller.set_user_attribute([as8], 2, layup)
        print(5)
    print(airstair_8_layers)
    print(airstair_8_layers.keys())
    print(airstair_8_layers.values())
    for as10 in airstair_10_layers.keys():
        layup = "AS10"
        attribute_controller.set_user_attribute([as10], 2, layup)
        print(6)
    print(airstair_10_layers)
    print(airstair_10_layers.keys())
    print(airstair_10_layers.values())

    utility_controller.print_error('Lay-up set to activated panels')

if selected_menu_item == 'Training 1':

    print('1111')

if selected_menu_item == 'IFC export':

    element_type_2x3_not_set = []
    building_and_storey_not_set = []
    correct_storey = "Storey 1"
    correct_building = "Building 1"
    today = datetime.date.today()
    day = today.strftime("%x")
    ifc_extension = ".ifc"
    project_name = utility_controller.get_3d_file_name()
    project_name_good_to_use = project_name.replace(".3d", "")
    ifc_name = f"{project_name_good_to_use}{ifc_extension}"
    scene_name = f"IFC - {today.strftime('%Y-%m-%d')}"
    parts_to_export = []
    not_exported = []

    for stuff in active_elements:

        if attribute_controller.get_element_material_name(stuff) == "CLT":
            parts_to_export.append(stuff)
        else:
            material_name = attribute_controller.get_element_material_name(stuff)
            if "BEAM" in material_name:
                parts_to_export.append(stuff)
            else:
                if attribute_controller.get_name(stuff) == "Grid":
                    parts_to_export.append(stuff)
                else:
                    if attribute_controller.get_name(stuff) == "GRID":
                        parts_to_export.append(stuff)
                    else:
                        if attribute_controller.get_name(stuff) == "DirectionArrow":
                            parts_to_export.append(stuff)
                        else:
                            if attribute_controller.is_drilling(stuff):
                                parts_to_export.append(stuff)
                            else:
                                if attribute_controller.is_connector_axis(stuff):
                                    parts_to_export.append(stuff)
                                else:
                                    if visualization_controller.get_color(stuff) == 5:
                                        parts_to_export.append(stuff)
                                    else:
                                        if attribute_controller.get_element_material_name(stuff) == "LGL":
                                            parts_to_export.append(stuff)
                                        else:
                                            if attribute_controller.get_user_attribute(stuff, 15) == "Yes":
                                                parts_to_export.append(stuff)
                                            else:
                                                if attribute_controller.get_name(stuff) == "RL line":
                                                    parts_to_export.append(stuff)
                                                else:
                                                    if attribute_controller.get_element_material_name(stuff) == "Wrap":
                                                        parts_to_export.append(stuff)
                                                    else:
                                                        not_exported.append(stuff)

    visualization_controller.set_inactive(not_exported)
    scene_controller.delete_scene(scene_name)
    scene_controller.add_scene(scene_name)
    scene_controller.add_elements_to_scene(scene_name, parts_to_export)
    print(parts_to_export)

    for panel in parts_to_export:
        if bim_controller.get_building(panel) == "Building 1":
            pass
        else:
            building_and_storey_not_set.append(panel)

    for panel in parts_to_export:
        if bim_controller.get_storey(panel) == "Storey 1":
            pass
        else:
            if panel not in building_and_storey_not_set:
                building_and_storey_not_set.append(panel)

    for parts in building_and_storey_not_set:
        parts_to_be_set = []
        parts_to_be_set.append(parts)
        bim_controller.set_building_and_storey(parts_to_be_set, correct_building, correct_storey)

    print(building_and_storey_not_set)

    for panel in parts_to_export:
        ifc_type = bim_controller.get_ifc2x3_element_type(panel)
        if cadwork.ifc_2x3_element_type.is_ifc_building_element_proxy(ifc_type):
            pass
        else:
            if panel not in element_type_2x3_not_set:
                element_type_2x3_not_set.append(panel)

    for parts in element_type_2x3_not_set:
        parts_to_be_set_again = []
        parts_to_be_set_again.append(parts)
        ifc_type = bim_controller.get_ifc2x3_element_type(parts)
        ifc_type.set_ifc_building_element_proxy()
        bim_controller.set_ifc2x3_element_type([parts], ifc_type)

    bim_controller.export_ifc(parts_to_export, ifc_name)

    # visualization_controller.hide_all_elements()
    # visualization_controller.set_visible(parts_to_export)

    utility_controller.print_error('IFC exported in folder - Scene created')

if selected_menu_item == 'Command test':
    panel_prod_numbers = ()
    all_panel_prod_number = ()
    element_without_prod_number = ()
    sorted_prod_number = []
    panel_prod_ids = {}
    point_3d = cadwork.point_3d()
    i = 0
    basic_indent = 1
    offset_current = 0
    offset_previous = 0
    half_current = ()
    half_previous = ()
    cumulative_height = 0
    offset_between_panel = 25
    panel = ""
    copied_parts = []
    o_a_truck_length = 13500

    for panel in active_elements:
        panel_prod_numbers = attribute_controller.get_production_number(panel)
        if panel_prod_numbers != "":
            if panel_prod_numbers not in panel_prod_ids.keys():
                panel_prod_ids[panel_prod_numbers] = []
            panel_prod_ids[panel_prod_numbers].append(panel)
        else:
            element_without_prod_number = []
            element_without_prod_number.append(panel)

    sorted_prod_ids_by_value = dict(sorted(panel_prod_ids.items(), key=lambda item: item[1]))

    sorted_keys = sorted(panel_prod_ids.keys())
    sorted_prod_ids_by_key = {key: panel_prod_ids[key] for key in sorted_keys}

    reversed_sorted_key = reversed(sorted(panel_prod_ids.keys()))
    reversed_sorted_prod_ids_by_key = {key: panel_prod_ids[key] for key in reversed_sorted_key}

    listed_in_reversed_order_key = list(reversed_sorted_prod_ids_by_key.keys())

    listed_in_reversed_order_value = list(reversed_sorted_prod_ids_by_key.values())

    values_iter = [listed_in_reversed_order_key[i]]

    for values_iter in listed_in_reversed_order_key:

        for stuff in active_elements:
            prod_num_for_now = attribute_controller.get_production_number(stuff)

            if values_iter != prod_num_for_now:
                pass
            else:
                panel = [stuff]
                my_coord_ref = geometry_controller.get_p1(stuff)
                o_a_length_of_panel = geometry_controller.get_length(stuff)
                o_a_width_of_panel = geometry_controller.get_width(stuff)
                if o_a_length_of_panel > o_a_width_of_panel:
                    old_xl = geometry_controller.get_xl(stuff)
                    old_yl = geometry_controller.get_yl(stuff)
                    offset_current = geometry_controller.get_height(stuff)
                    offset_current = round(offset_current)
                    offset_current = (offset_current / 2)
                    new_point = cadwork.point_3d(0, ((o_a_truck_length - o_a_length_of_panel) / 2), cumulative_height + offset_current)
                    new_xl = cadwork.point_3d(0, 1, 0)
                    new_yl = cadwork.point_3d(1, 0, 0)
                    element_controller.apply_transformation_coordinate(panel, my_coord_ref, old_xl, old_yl, new_point, new_xl, new_yl)
                    offset_previous = (cumulative_height + offset_current)
                    cumulative_height = offset_previous + offset_current + offset_between_panel
                else:
                    old_xl = geometry_controller.get_xl(stuff)
                    old_yl = geometry_controller.get_yl(stuff)
                    offset_current = geometry_controller.get_height(stuff)
                    offset_current = round(offset_current)
                    offset_current = (offset_current / 2)
                    new_point = cadwork.point_3d((-o_a_length_of_panel / 2), (((o_a_truck_length - o_a_width_of_panel) / 2) + o_a_width_of_panel / 2), cumulative_height + offset_current)
                    new_xl = cadwork.point_3d(1, 0, 0)
                    new_yl = cadwork.point_3d(0, 1, 0)
                    element_controller.apply_transformation_coordinate(panel, my_coord_ref, old_xl, old_yl, new_point, new_xl, new_yl)
                    offset_previous = (cumulative_height + offset_current)
                    cumulative_height = offset_previous + offset_current + offset_between_panel

        i = i + basic_indent
    #
    # if element_without_prod_number:
    #     pass
    # else:
    #     parts = element_without_prod_number
    #     visualization_controller.set_active(parts)
    #     utility_controller.print_error('Active parts does not have a prod number so they could not be processed')

    print("test")

if selected_menu_item == 'Storage':
    panel_weight = ()
    total_panel_weight_per_truck = ()
    dictionary_try = {}
    dictionary_2nd_try = {}
    panel_name = ()
    panel_height = ()
    truck_numbering = "Truck "
    i = 0
    n = 100
    basic_indent = 1

    for panel in active_elements:
        panel_name = attribute_controller.get_name(panel)
        print(panel_name)
        if panel_name not in dictionary_try.keys():
            i = i + basic_indent
            panel_name = []
            panel_name.append(panel)
        dictionary_try[i] = []
        dictionary_try[i].append(panel)
        print(i)
    for panel in active_elements:
        panel_height = geometry_controller.get_height(panel)
        print(panel_height)
        if panel_height not in dictionary_try.keys():
            n = n + basic_indent
            panel_height = []
            panel_height.append(panel)
        dictionary_2nd_try[n] = []
        dictionary_2nd_try[n].append(panel)
        print(n)
    print(dictionary_try.keys())
    print(dictionary_2nd_try.keys())
    print(dictionary_try.values())
    print(dictionary_2nd_try.values())

    utility_controller.print_error('1111')

    # Some more storage

    # ifc_scene = "IFC"
    # ifc_element_type = "none"
    # ifc_building_type = "Building 1"
    # ifc_storey_type = "Storey 1"
    # today = datetime.date.today()
    # day = today.strftime("%x")
    # scene_name = ifc_scene + "-" + day
    # to_add_to_scene = {}
    # panel_name = ()
    # i = 0
    # indent = 1
    # for panel in active_elements:
    #     panel_name = attribute_controller.get_name(panel)
    #     print(panel_name)
    #     if panel_name not in to_add_to_scene.keys():
    #         i = i + indent
    #         panel_name = []
    #         panel_name.append(panel)
    #     to_add_to_scene[i] = []
    #     to_add_to_scene[i].append(panel_name)
    # bim_controller.set_building_and_storey(to_add_to_scene, ifc_building_type, ifc_storey_type)
    # bim_controller.set_ifc2x3_element_type(to_add_to_scene, ifc_element_type)
    # print(to_add_to_scene)
    # scene_controller.add_scene(scene_name)
    # part_change = (to_add_to_scene)
    # scene_controller.add_elements_to_scene([to_add_to_scene], [scene_name])


#
#     panel_weight = ()
#     total_panel_weight_per_truck = ()
#     truck = {}
#     dictionary_2nd_try = {}
#     panel_name = ()
#     panel_height = ()
#     max_panel_weight_per_truck = 23500
#     truck_numbering = ()
#     panel_weight_int = ()
#     i = 0
#     n = 100
#     basic_indent = 1
#     res = []
#
#     for panel in active_elements:
#         panel_weight = geometry_controller.get_weight(panel)
#         print(panel_weight)
#         panel_weight_int = (math.trunc(panel_weight * 1))
#         print(panel_weight_int)
#         # total_panel_weight_per_truck = panel_weight_int
#         if panel_weight_int not in truck.keys():
#             panel_weight_int = []
#             panel_weight_int.append(panel)
#             # total_panel_weight_per_truck = sum(panel_weight_int)
#             i = i + basic_indent
#         truck[i] = []
#         truck[i].append(panel)
#         res = sum([key for key in truck])
#         print(res)
#         # truck[panel_weight] = []
#         # truck[panel_weight].append(panel)
#     # print(total_panel_weight_per_truck)
#     print(truck.keys())
#     print(truck.values())
#
#     # print(truck.keys())
#     # print(truck.values())
#     # print(sum(truck.values()))
#
#     # print(panel_weight)
#     # total_panel_weight_per_truck = (sum(truck()))
#
# # restores check and query prompts
#
# Below storage for copied parts with coordinates
#
# if selected_menu_item == 'Command test':
#     panel_prod_numbers = ()
#     all_panel_prod_number = ()
#     sorted_prod_number = []
#     panel_prod_ids = {}
#     point_3d = cadwork.point_3d()
#     i = 0
#     basic_indent = 1
#     offset_current = ()
#     offset_previous = 0
#     half_current = ()
#     half_previous = ()
#     cumulative_height = ()
#     offset_between_panel = 20
#     panel = ""
#     copied_parts = []
#
#     for panel in active_elements:
#         panel_prod_numbers = attribute_controller.get_production_number(panel)
#         # print(panel_prod_numbers)
#         if panel_prod_numbers not in panel_prod_ids.keys():
#             panel_prod_ids[panel_prod_numbers] = []
#         panel_prod_ids[panel_prod_numbers].append(panel)
#
#     # print(panel_prod_ids)
#     sorted_prod_ids_by_value = dict(sorted(panel_prod_ids.items(), key=lambda item: item[1]))
#     # print(sorted_prod_ids_by_value)
#
#     sorted_keys = sorted(panel_prod_ids.keys())
#     sorted_prod_ids_by_key = {key: panel_prod_ids[key] for key in sorted_keys}
#     # print(sorted_prod_ids_by_key)
#
#     reversed_sorted_key = reversed(sorted(panel_prod_ids.keys()))
#     reversed_sorted_prod_ids_by_key = {key: panel_prod_ids[key] for key in reversed_sorted_key}
#     # print(reversed_sorted_prod_ids_by_key)
#
#     listed_in_reversed_order_key = list(reversed_sorted_prod_ids_by_key.keys())
#     # print(listed_in_reversed_order_key)
#
#     listed_in_reversed_order_value = list(reversed_sorted_prod_ids_by_key.values())
#     # print(listed_in_reversed_order_value)
#
#     values_iter = [listed_in_reversed_order_key[i]]
#
#     for values_iter in listed_in_reversed_order_key:
#         # print(i)
#         for stuff in active_elements:
#             prod_num_for_now = attribute_controller.get_production_number(stuff)
#             # print(values_iter)
#             # print(prod_num_for_now)
#             if values_iter != prod_num_for_now:
#                 pass
#             else:
#                 panel = [stuff]
#                 my_coord_ref = geometry_controller.get_p1(stuff)
#                 my_coord_ref_x = my_coord_ref.x
#                 my_coord_ref_y = my_coord_ref.y
#                 my_coord_ref_z = my_coord_ref.z
#                 offset_current = geometry_controller.get_height(stuff)
#                 offset_current = round(offset_current)
#                 offset_current = (offset_current / 2)
#                 cumulative_height = offset_previous + offset_current
#                 point_3d_tgt = cadwork.point_3d((0 - my_coord_ref_x), (0 - my_coord_ref_y), (0 - my_coord_ref_z + cumulative_height))
#                 created_part = element_controller.copy_elements(panel, point_3d_tgt)
#                 copied_parts.append(created_part)
#                 offset_previous = (offset_current + cumulative_height + offset_between_panel)
#         i = i + basic_indent

utility_controller.pop_check_and_query_data()
